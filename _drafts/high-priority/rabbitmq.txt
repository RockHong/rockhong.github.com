---
# MUST HAVE BEG
layout: post
disqus_identifier: 20160802-rabbitmq-intro-1 # DO NOT CHANGE THE VALUE ONCE SET
title: RabbitMQ简介
# MUST HAVE END

is_short: true      # <!--more-->
subtitle:
tags: 
- rabbitMQ
date: 2016-08-02 19:36:00
image: 
image_desc: 
---






===
https://www.rabbitmq.com/tutorials/amqp-concepts.html
这个文章不错
messages are published to exchanges
Exchanges then distribute message copies to queues using rules called bindings.
Queues, exchanges and bindings are collectively referred to as AMQP entities.

When publishing a message, publishers may specify various message attributes (message meta-data). Some of this meta-data may be used by the broker, however, the rest of it is completely opaque to the broker and is only used by applications that receive the message.
消息头有一些rabbitmq会用，有一些application自定的

message acknowledgements: 
when a message is delivered to a consumer the consumer notifies the broker, either automatically or as soon as the application developer chooses to do so. When message acknowledgements are in use, a broker will only completely remove a message from a queue when it receives a notification for that message (or group of messages).

"dead letter queue"
In certain situations, for example, when a message cannot be routed, messages may be returned to publishers, dropped, or, if the broker implements an extension, placed into a so-called "dead letter queue". 

Exchanges and Exchange Types
Exchanges take a message and route it into zero or more queues.
The routing algorithm used depends on the exchange type and rules called bindings.
exchange types:
Direct exchange
Fanout exchange
Topic exchange
Headers exchange
exchanges are declared with a number of attributes，exchange有一些属性，比如
Name
Durability (exchanges survive broker restart)
Auto-delete (exchange is deleted when all queues have finished using it)
Arguments (these are broker-dependent)

Default Exchange
默认有个名字是空的exchange
every queue that is created is automatically bound to it with a routing key which is the same as the queue name.
For example, when you declare a queue with the name of "search-indexing-online", the AMQP broker will bind it to the default exchange using "search-indexing-online" as the routing key. Therefore, a message published to the default exchange with the routing key "search-indexing-online" will be routed to the queue "search-indexing-online". In other words, the default exchange makes it seem like it is possible to deliver messages directly to queues, even though that is not technically what is happening.
queue默认会收到routing key是它名字的消息

Direct Exchange
A direct exchange delivers messages to queues based on the message routing key.
A direct exchange is ideal for the unicast routing of messages (although they can be used for multicast routing as well)
Here is how it works:
A queue binds to the exchange with a routing key K
When a new message with routing key R arrives at the direct exchange, the exchange routes it to the queue if K = R
工作原理，queue和exchange通过binding联系在一起，binding里指定了routing key；如果消息的routing key和binding指定的一样，那么这个queue就会收到。
direct exchange可以和很多queue binding在一起

Direct exchanges are often used to distribute tasks between multiple workers (instances of the same application) in a round robin manner. When doing so, it is important to understand that, in AMQP 0-9-1, messages are load balanced between consumers and not between queues.

Fanout Exchange
这种exchange会把msg发给所有和它binding的queue

Topic Exchange
Topic exchanges route messages to one or many queues based on matching between a message routing key and the pattern that was used to bind a queue to an exchange. 
queue和exchange的binding会有通配符

Queues
queue也会有一些属性，比如
Name
Durable (the queue will survive a broker restart)
Exclusive (used by only one connection and the queue will be deleted when that connection closes)
Auto-delete (queue is deleted when last consumer unsubscribes)
Arguments (some brokers use it to implement additional features like message TTL)

Bindings
Bindings are rules that exchanges use (among other things) to route messages to queues. 
To instruct an exchange E to route messages to a queue Q, Q has to be bound to E.
queue要收到msg，必须和exchange之间建立binding

Channels
AMQP 0-9-1 connections are multiplexed with channels that can be thought of as "lightweight connections that share a single TCP connection".
connection太多消耗资源；channel比较轻量级

Communication on a particular channel is completely separate from communication on another channel, therefore every AMQP method also carries a channel number that clients use to figure out which channel the method is for (and thus, which event handler needs to be invoked, for example).
channel之间是隔离的

For applications that use multiple threads/processes for processing, it is very common to open a new channel per thread/process and not share channels between them.

Virtual Hosts













Channel

exchange
An exchange is a very simple thing. On one side it receives messages from producers and the other side it pushes them to queues. The exchange must know exactly what to do with a message it receives. Should it be appended to a particular queue? Should it be appended to many queues? Or should it get discarded. The rules for that are defined by the exchange type.
There are a few exchange types available: direct, topic, headers and fanout. 
channel.exchangeDeclare("logs", "fanout");
it just broadcasts all the messages it receives to all the queues it knows.

Nameless exchange
In previous parts of the tutorial we knew nothing about exchanges, but still were able to send messages to queues. That was possible because we were using a default exchange

Topic exchange

queue
the producer never sends any messages directly to a queue
Instead, the producer can only send messages to an exchange. 

Bindings
need to tell the exchange to send messages to our queue.
Bindings
channel.queueBind(queueName, EXCHANGE_NAME, "");
This can be simply read as: the queue is interested in messages from this exchange.
Bindings can take an extra routingKey parameter. 


message acknowledgments
RabbitMQ supports message acknowledgments
without sending an ack, RabbitMQ will understand that a message wasn't processed fully and will re-queue it
Message acknowledgments are turned on by default. 

durability persistent
Marking messages as persistent doesn't fully guarantee that a message won't be lost. 
Although it tells RabbitMQ to save the message to disk, there is still a short time window when RabbitMQ has accepted a message and hasn't saved it yet. Also, RabbitMQ doesn't do fsync(2) for every message -- it may be just saved to cache and not really written to the disk. The persistence guarantees aren't strong, but it's more than enough for our simple task queue. If you need a stronger guarantee then you can use publisher confirms.

Fair dispatch
This happens because RabbitMQ just dispatches a message when the message enters the queue. 
It doesn't look at the number of unacknowledged messages for a consumer. 
It just blindly dispatches every n-th message to the n-th consumer.
In order to defeat that we can use the basicQos method with the prefetchCount = 1 setting. This tells RabbitMQ not to give more than one message to a worker at a time. Or, in other words, don't dispatch a new message to a worker until it has processed and acknowledged the previous one. Instead, it will dispatch it to the next worker that is not still busy.




https://www.rabbitmq.com/getstarted.html

https://www.rabbitmq.com/tutorials/tutorial-one-java.html
RabbitMQ speaks multiple protocols. This tutorial uses AMQP 0-9-1, which is an open, general-purpose protocol for messaging.

The RabbitMQ Java client is also in the central Maven repository, with the groupId com.rabbitmq and the artifactId amqp-client.

Channel channel = connection.createChannel();
Next we create a channel, which is where most of the API for getting things done resides.

To send, we must declare a queue for us to send to; then we can publish a message to the queue:
    channel.queueDeclare(QUEUE_NAME, false, false, false, null);
    String message = "Hello World!";
    channel.basicPublish("", QUEUE_NAME, null, message.getBytes());

Lastly, we close the channel and the connection;


https://www.rabbitmq.com/tutorials/tutorial-two-java.html
Work Queues

create a Work Queue that will be used to distribute time-consuming tasks among multiple workers.

The main idea behind Work Queues (aka: Task Queues) is to avoid doing a resource-intensive task immediately and having to wait for it to complete.
Instead we schedule the task to be done later.
We encapsulate a task as a message and send it to a queue.
A worker process running in the background will pop the tasks and eventually execute the job. 
When you run many workers the tasks will be shared between them.

With our current code, once RabbitMQ delivers a message to the customer it immediately removes it from memory.
In order to make sure a message is never lost, RabbitMQ supports message acknowledgments.
If a consumer dies (its channel is closed, connection is closed, or TCP connection is lost) without sending an ack, RabbitMQ will understand that a message wasn't processed fully and will re-queue it.
Message acknowledgments are turned on by default. 
channel.basicAck(envelope.getDeliveryTag(), false);

Message durability
But our tasks will still be lost if RabbitMQ server stops.
we need to declare it as durable:
boolean durable = true;
channel.queueDeclare("hello", durable, false, false, null);
This queueDeclare change needs to be applied to both the producer and consumer code.
At this point we're sure that the task_queue queue won't be lost even if RabbitMQ restarts. 

Now we need to mark our messages as persistent - by setting MessageProperties (which implements BasicProperties) to the value PERSISTENT_TEXT_PLAIN.
channel.basicPublish("", "task_queue",
            MessageProperties.PERSISTENT_TEXT_PLAIN,
            message.getBytes());
            
Marking messages as persistent doesn't fully guarantee that a message won't be lost. 
Although it tells RabbitMQ to save the message to disk, there is still a short time window when RabbitMQ has accepted a message and hasn't saved it yet. Also, RabbitMQ doesn't do fsync(2) for every message -- it may be just saved to cache and not really written to the disk. The persistence guarantees aren't strong, but it's more than enough for our simple task queue. If you need a stronger guarantee then you can use publisher confirms.


Fair dispatch
This happens because RabbitMQ just dispatches a message when the message enters the queue. 
It doesn't look at the number of unacknowledged messages for a consumer. 
It just blindly dispatches every n-th message to the n-th consumer.
In order to defeat that we can use the basicQos method with the prefetchCount = 1 setting. This tells RabbitMQ not to give more than one message to a worker at a time. Or, in other words, don't dispatch a new message to a worker until it has processed and acknowledged the previous one. Instead, it will dispatch it to the next worker that is not still busy.



https://www.rabbitmq.com/tutorials/tutorial-three-java.html
Publish/Subscribe

The core idea in the messaging model in RabbitMQ is that the producer never sends any messages directly to a queue. Actually, quite often the producer doesn't even know if a message will be delivered to any queue at all.

Instead, the producer can only send messages to an exchange. An exchange is a very simple thing. On one side it receives messages from producers and the other side it pushes them to queues. The exchange must know exactly what to do with a message it receives. Should it be appended to a particular queue? Should it be appended to many queues? Or should it get discarded. The rules for that are defined by the exchange type.

There are a few exchange types available: direct, topic, headers and fanout. 
channel.exchangeDeclare("logs", "fanout");
it just broadcasts all the messages it receives to all the queues it knows.

$ sudo rabbitmqctl list_exchanges

Nameless exchange
In previous parts of the tutorial we knew nothing about exchanges, but still were able to send messages to queues. That was possible because we were using a default exchange

Temporary queues
Being able to name a queue was crucial for us -- we needed to point the workers to the same queue.
In the Java client, when we supply no parameters to queueDeclare() we create a non-durable, exclusive, autodelete queue with a generated name


Bindings
need to tell the exchange to send messages to our queue.



https://www.rabbitmq.com/tutorials/tutorial-four-java.html
Routing

Bindings
channel.queueBind(queueName, EXCHANGE_NAME, "");
This can be simply read as: the queue is interested in messages from this exchange.
Bindings can take an extra routingKey parameter. 

Direct exchange

Multiple bindings


https://www.rabbitmq.com/tutorials/tutorial-five-java.html
Topics

Topic exchange
Messages sent to a topic exchange can't have an arbitrary routing_key - it must be a list of words, delimited by dots.
A few valid routing key examples: "stock.usd.nyse", "nyse.vmw", "quick.orange.rabbit". There can be as many words in the routing key as you like, up to the limit of 255 bytes.



https://www.rabbitmq.com/tutorials/tutorial-six-java.html
Remote procedure call (RPC)

use RabbitMQ to build an RPC system
It's going to expose a method named call which sends an RPC request and blocks until the answer is received

Client interface
In general doing RPC over RabbitMQ is easy. A client sends a request message and a server replies with a response message. 


Message properties
The AMQP protocol predefines a set of 14 properties that go with a message. 
correlationId: Useful to correlate RPC responses with requests.
replyTo: Commonly used to name a callback queue.
contentType

Correlation Id
In the method presented above we suggest creating a callback queue for every RPC request. That's pretty inefficient, but fortunately there is a better way - let's create a single callback queue per client.

Callback queue




https://spring.io/guides/gs/messaging-rabbitmq/
Messaging with RabbitMQ
This guide walks you through the process of setting up a RabbitMQ AMQP server that publishes and subscribes to messages.

publishes a message using Spring AMQP’s RabbitTemplate
subscribes to the message on a POJO using MessageListenerAdapter

Set up RabbitMQ broker
brew install rabbitmq
rabbitmq-server

Spring AMQP’s RabbitTemplate provides everything you need to send and receive messages with RabbitMQ. Specifically, you need to configure:
A message listener container
Declare the queue, the exchange, and the binding between them




https://spring.io/understanding/AMQP
Understanding AMQP

AMQP (Advanced Message Queueing Protocol) is an openly published wire specification for asynchronous messaging. Every byte of transmitted data is specified. This characteristic allows libraries to be written in many languages, and to run on multiple operating systems and CPU architectures, which makes for a truly interoperable, cross-platform messaging standard.

Advantages of AMQP over JMS
A limitation of JMS is that the APIs are specified, but the message format is not
Unlike AMQP, JMS has no requirement for how messages are formed and transmitted.

These advantages and the openness of the spec have inspired the creation of multiple brokers that support AMQP, including:
RabbitMQ
ActiveMQ
Qpid

AMQP and JMS terminology
JMS has queues and topics. A message sent on a JMS queue is consumed by no more than one client. A message sent on a JMS topic may be consumed by multiple consumers. AMQP only has queues. While AMQP queues are only consumed by a single receiver, AMQP producers don't publish directly to queues. A message is published to an exchange, which through its bindings may get sent to one queue or multiple queues, effectively emulating JMS queues and topics.

JMS and AMQP have an equivalent message header, providing the means to sort and route messages.

JMS and AMQP both have brokers responsible for receiving, routing, and ultimately dispensing messages to consumers.

AMQP has exchanges, routes, and queues. Messages are first published to exchanges. Routes define on which queue(s) to pipe the message. Consumers subscribing to that queue then receive a copy of the message. If more than one consumer subscribes to the same queue, the messages are dispensed in a round-robin fashion.   这一条好像和第一条有点矛盾





http://docs.spring.io/spring-amqp/reference/html/

The Spring AMQP project applies core Spring concepts to the development of AMQP-based messaging solutions. We provide a "template" as a high-level abstraction for sending and receiving messages. We also provide support for Message-driven POJOs. These libraries facilitate management of AMQP resources while promoting the use of dependency injection and declarative configuration. 

2. Introduction
<dependency>
  <groupId>org.springframework.amqp</groupId>
  <artifactId>spring-rabbit</artifactId>
  <version>1.6.0.RELEASE</version>
</dependency>

Similarly, the default amqp-client version is 3.6.x but the framework is compatible with versions 3.4.0 and above.







http://www.slideshare.net/old_sound/dissecting-the-rabbit
https://vimeo.com/98429656

http://videlalvaro.github.io/internals.html



http://www.amqp.org/resources/developer-faqs#q3


http://spring.io/blog/2010/06/14/understanding-amqp-the-protocol-used-by-rabbitmq/







