public class SimpleMessageListenerContainer extends AbstractMessageListenerContainer {
	private boolean receiveAndExecute(final BlockingQueueConsumer consumer) throws Throwable {
	
org.springframework.amqp.rabbit.listener.BlockingQueueConsumer	

5.3 Blocking queues and the producer-consumer pattern
Blocking queues provide blocking put and take methods as well as the timed equivalents offer and poll.
Queues can be bounded or unbounded; unbounded queues are never full
Blocking queues support the producer-consumer design pattern.
The producer- consumer pattern simplifies development because it removes code dependencies between producer and consumer classes
BlockingQueue
One of the most common producer-consumer designs is a thread pool coupled with a work queue; this pattern is embodied in the Executor task execution framework that is the subject of Chapters 6 and 8.
If the producers consistently generate work faster than the consumers can process it, eventually the application will run out of memory because work items will queue up without bound.
offer method, which returns a failure status if the item cannot be enqueued. This enables you to create more flexible policies for dealing with overload, such as shedding load, serializing excess work items and writing them to disk, reducing the number of producer threads, or throttling producers in some other manner.
Bounded queues are a powerful resource management tool for building reliable applications: they make your program more robust to overload by throttling activities that threaten to produce more work than can be handled.
if blocking queues don’t fit easily into your design, you can create other blocking data structures using Semaphore
several implementations of BlockingQueue
LinkedBlockingQueue and ArrayBlockingQueue are FIFO queues
PriorityBlockingQueue is a priority-ordered queue
SynchronousQueue, is not really a queue at all, in that it maintains no storage space for queued elements. Instead, it maintains a list of queued threads waiting to enqueue or dequeue an element. In the dish-washing analogy, this would be like having no dish rack, but instead handing the washed dishes directly to the next available dryer. While this may seem a strange way to implement a queue, it reduces the latency associated with moving data from producer to consumer because the work can be handed off directly. 
Since a SynchronousQueue has no storage capacity, put and take will block unless another thread is already waiting to participate in the handoff.




http://projects.spring.io/spring-amqp/
applies core Spring concepts to the development of AMQP-based messaging solutions. It provides a "template" as a high-level abstraction for sending and receiving messages. It also provides support for Message-driven POJOs with a "listener container". These libraries facilitate management of AMQP resources while promoting the use of dependency injection and declarative configuration. 

The project consists of two parts; spring-amqp is the base abstraction, and spring-rabbit is the RabbitMQ implementation.

Listener container for asynchronous processing of inbound messages
RabbitTemplate for sending and receiving messages
RabbitAdmin for automatically declaring queues, exchanges and bindings

里面也有示例代码
纯java
public static void main(final String... args) throws Exception {

	ConnectionFactory cf = new CachingConnectionFactory();

	// set up the queue, exchange, binding on the broker
	RabbitAdmin admin = new RabbitAdmin(cf);
	Queue queue = new Queue("myQueue");
	admin.declareQueue(queue);
	TopicExchange exchange = new TopicExchange("myExchange");
	admin.declareExchange(exchange);
	admin.declareBinding(
		BindingBuilder.bind(queue).to(exchange).with("foo.*"));

	// set up the listener and container
	SimpleMessageListenerContainer container =
			new SimpleMessageListenerContainer(cf);
	Object listener = new Object() {
		public void handleMessage(String foo) {
			System.out.println(foo);
		}
	};
	MessageListenerAdapter adapter = new MessageListenerAdapter(listener);
	container.setMessageListener(adapter);
	container.setQueueNames("myQueue");
	container.start();

	// send something
	RabbitTemplate template = new RabbitTemplate(cf);
	template.convertAndSend("myExchange", "foo.bar", "Hello, world!");
	Thread.sleep(1000);
	container.stop();
}
spring风格的
public static void main(final String... args) throws Exception {

	AbstractApplicationContext ctx =
		new ClassPathXmlApplicationContext("context.xml");
	RabbitTemplate template = ctx.getBean(RabbitTemplate.class);
	template.convertAndSend("Hello, world!");
	Thread.sleep(1000);
	ctx.destroy();
}

public class Foo {

	public void listen(String foo) {
		System.out.println(foo);
	}
}

<rabbit:connection-factory id="connectionFactory" />

<rabbit:template id="amqpTemplate" connection-factory="connectionFactory"
	exchange="myExchange" routing-key="foo.bar"/>

<rabbit:admin connection-factory="connectionFactory" />

<rabbit:queue name="myQueue" />

<rabbit:topic-exchange name="myExchange">
	<rabbit:bindings>
		<rabbit:binding queue="myQueue" pattern="foo.*" />
	</rabbit:bindings>
</rabbit:topic-exchange>


<rabbit:listener-container connection-factory="connectionFactory">
	<rabbit:listener ref="foo" method="listen" queue-names="myQueue" />
</rabbit:listener-container>

<bean id="foo" class="foo.Foo" />



http://docs.spring.io/spring-amqp/docs/1.6.1.RELEASE/reference/html/_introduction.html
有一个非常简单的例子
ConnectionFactory connectionFactory = new CachingConnectionFactory();
AmqpAdmin admin = new RabbitAdmin(connectionFactory);
admin.declareQueue(new Queue("myqueue"));
AmqpTemplate template = new RabbitTemplate(connectionFactory);
template.convertAndSend("myqueue", "foo");
String foo = (String) template.receiveAndConvert("myqueue");


http://docs.spring.io/spring-amqp/docs/1.6.1.RELEASE/reference/html/_reference.html
Exchange
a Direct exchange allows for a Queue to be bound by a fixed routing key (often the Queue’s name). A Topic exchange supports bindings with routing patterns that may include the * and # wildcards for exactly-one and zero-or-more, respectively. The Fanout exchange publishes to all Queues that are bound to it without taking any routing key into consideration.

Queue

Binding
new Binding(someQueue, someDirectExchange, "foo.bar")
new Binding(someQueue, someTopicExchange, "foo.*")
new Binding(someQueue, someFanoutExchange)

3.1.2 Connection and Resource Management
The responsibility of a ConnectionFactory implementation is to provide an instance of org.springframework.amqp.rabbit.connection.Connection which is a wrapper for com.rabbitmq.client.Connection. The only concrete implementation we provide is CachingConnectionFactory which, by default, establishes a single connection proxy that can be shared by the application.
Sharing of the connection is possible since the "unit of work" for messaging with AMQP is actually a "channel" (in some ways, this is similar to the relationship between a Connection and a Session in JMS). As you can imagine, the connection instance provides a createChannel method.
The CachingConnectionFactory implementation supports caching of those channels, and it maintains separate caches for channels based on whether they are transactional or not.
the CachingConnectionFactory can be configured to cache connections as well as just channels. In this case, each call to createConnection() creates a new connection (or retrieves an idle one from the cache). Closing a connection returns it to the cache (if the cache size has not been reached). Channels created on such connections are cached too. The use of separate connections might be useful in some environments, such as consuming from an HA cluster, in conjunction with a load balancer, to connect to different cluster members. Set the cacheMode to CacheMode.CONNECTION.


3.1.4 AmqpTemplate
AMQP is a wire-level protocol. The implementations of that protocol provide their own client libraries, so each implementation of the template interface will depend on a particular client library.
the AmqpTemplate interface defines all of the basic operations for sending and receiving Messages.

you can now configure the RabbitTemplate to use a RetryTemplate to help with handling problems with broker connectivity. Refer to the spring-retry project for complete information

The RabbitTemplate implementation of AmqpTemplate supports Publisher Confirms and Returns

3.1.5 Sending messages

Batching

3.1.6 Receiving messages
two ways to receive a Message. The simpler option is to poll for a single Message at a time with a polling method call. The more complicated yet more common approach is to register a listener that will receive Messages on-demand, asynchronously.

Polling Consumer
The AmqpTemplate itself can be used for polled Message reception. By default, if no message is available, null is returned immediately; there is no blocking. 
Starting with version 1.5, you can now set a receiveTimeout

Asynchronous Consumer
For asynchronous Message reception, a dedicated component (not the AmqpTemplate) is involved. That component is a container for a Message consuming callback. 
MessageListener interface
MessageListenerAdapter
Container
Basically, the container handles the "active" responsibilities so that the listener callback can remain passive.

Threading and Asynchronous Consumers

























## relative java knowledge
### java.util.concurrent.CountDownLatch

A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes.

A CountDownLatch is initialized with a given count. The await methods block until the current count reaches zero due to invocations of the countDown method, after which all waiting threads are released and any subsequent invocations of await return immediately. This is a one-shot phenomenon -- the count cannot be reset. If you need a version that resets the count, consider using a CyclicBarrier.





## impl
	private final class AsyncMessageProcessingConsumer implements Runnable {
		private final BlockingQueueConsumer consumer;
		private final CountDownLatch start;			
		private AsyncMessageProcessingConsumer(BlockingQueueConsumer consumer) {
			this.consumer = consumer;
			this.start = new CountDownLatch(1);
		}
		@Override
		public void run() {
		。。。
				while (isActive(this.consumer) || this.consumer.hasDelivery() || !this.consumer.cancelled()) {
					try {
						boolean receivedOk = receiveAndExecute(this.consumer); // At least one message received				
		

public class SimpleMessageListenerContainer extends AbstractMessageListenerContainer
		implements ApplicationEventPublisherAware {
	protected void addAndStartConsumers(int delta) {
		synchronized (this.consumersMonitor) {
			if (this.consumers != null) {
				for (int i = 0; i < delta; i++) {
					BlockingQueueConsumer consumer = createBlockingQueueConsumer();
					this.consumers.put(consumer, true);
					AsyncMessageProcessingConsumer processor = new AsyncMessageProcessingConsumer(consumer);
					if (logger.isDebugEnabled()) {
						logger.debug("Starting a new consumer: " + consumer);
					}
					this.taskExecutor.execute(processor);
					
					
							


public class BlockingQueueConsumer {
	private final BlockingQueue<Delivery> queue;
	// When this is non-null the connection has been closed (should never happen in normal operation).
	private volatile ShutdownSignalException shutdown;
	private InternalConsumer consumer;	
		
	public BlockingQueueConsumer(ConnectionFactory connectionFactory,
			MessagePropertiesConverter messagePropertiesConverter,
			ActiveObjectCounter<BlockingQueueConsumer> activeObjectCounter, AcknowledgeMode acknowledgeMode,
			boolean transactional, int prefetchCount, boolean defaultRequeueRejected,
			Map<String, Object> consumerArgs, boolean exclusive, String... queues) {
		this.connectionFactory = connectionFactory;
		this.messagePropertiesConverter = messagePropertiesConverter;
		this.activeObjectCounter = activeObjectCounter;
		this.acknowledgeMode = acknowledgeMode;
		this.transactional = transactional;
		this.prefetchCount = prefetchCount;
		this.defaultRequeuRejected = defaultRequeueRejected;
		if (consumerArgs != null && consumerArgs.size() > 0) {
			this.consumerArgs.putAll(consumerArgs);
		}
		this.exclusive = exclusive;
		this.queues = queues;
		this.queue = new LinkedBlockingQueue<Delivery>(prefetchCount); === 
	}


	private final class InternalConsumer extends DefaultConsumer {
		@Override
		public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body)
				throws IOException {
			if (logger.isDebugEnabled()) {
				logger.debug("Storing delivery for " + BlockingQueueConsumer.this);
			}
			try {
				if (BlockingQueueConsumer.this.abortStarted > 0) {
					if (!BlockingQueueConsumer.this.queue.offer(new Delivery(consumerTag, envelope, properties, body),   ===
							BlockingQueueConsumer.this.shutdownTimeout, TimeUnit.MILLISECONDS)) { // NOSONAR
						// ignore - we're aborting anyway
					}
				}
				else {
					BlockingQueueConsumer.this.queue.put(new Delivery(consumerTag, envelope, properties, body));    ===
				}
			}
			catch (InterruptedException e) {
				Thread.currentThread().interrupt();
			}
		}

	}	







BlockingQueueConsumer 里有：
    private final BlockingQueue<Delivery> queue;
    private InternalConsumer consumer;
    
    BlockingQueueConsumer就是listener？？？
    
    public Message nextMessage() throws InterruptedException, ShutdownSignalException {
		logger.trace("Retrieving delivery for " + this);
		return handle(this.queue.take());
	}
	
	public Message nextMessage(long timeout)  这个有timeout，
	为什么要有timeout？因为要检查一下consumer是不是cancelled？？？
					while (isActive(this.consumer) || this.consumer.hasDelivery() || !this.consumer.cancelled()) {
					try {
						boolean receivedOk = receiveAndExecute(this.consumer); // At least one message received
    
InternalConsumer
会在handleDelivery方法里往  BlockingQueueConsumer.queue里put


AsyncMessageProcessingConsumer implements Runnable，它里面有
		private final BlockingQueueConsumer consumer;
		private final CountDownLatch start;   这个东西在run里会countDown；为什么要有这个东西
		
  run()里在做什么
   在run里最终会去BlockingQueueConsumer的queue里取message
   Message message = handle(this.queue.poll(timeout, TimeUnit.MILLISECONDS));	  timeout是1000
      有timeout，所以这是一种poll？？	看看queue.poll()的javadoc



BlockingQueueConsumer.<init>(ConnectionFactory, MessagePropertiesConverter, ActiveObjectCounter<BlockingQueueConsumer>, AcknowledgeMode, boolean, int, boolean, Map<String,Object>, boolean, String...) line: 238	
SimpleMessageListenerContainer.createBlockingQueueConsumer() line: 1028	   这里创建 BlockingQueueConsumer
SimpleMessageListenerContainer.initializeConsumers() line: 888	
SimpleMessageListenerContainer.doStart() line: 797	  ＝＝＝ 
SimpleMessageListenerContainer(AbstractMessageListenerContainer).start() line: 550	
DefaultLifecycleProcessor.doStart(Map<String,Lifecycle>, String, boolean) line: 173	   
DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor, Map, String, boolean) line: 51	
DefaultLifecycleProcessor$LifecycleGroup.start() line: 346	
DefaultLifecycleProcessor.startBeans(boolean) line: 149	
DefaultLifecycleProcessor.onRefresh() line: 112	
ClassPathXmlApplicationContext(AbstractApplicationContext).finishRefresh() line: 852	
ClassPathXmlApplicationContext(AbstractApplicationContext).refresh() line: 541	
ClassPathXmlApplicationContext.<init>(String[], boolean, ApplicationContext) line: 139	
ClassPathXmlApplicationContext.<init>(String) line: 83	
SpringWay.<init>() line: 18	
SpringWay.main(String...) line: 22	  主线程启动时


void org.springframework.context.Lifecycle.start()
Start this component.

SimpleMessageListenerContainer实现了Lifecycle（SmartLifecycle），所以这个bean的start()方法在context启动时会被调用


SimpleMessageListenerContainer在“start”时，除了 创建 BlockingQueueConsumer ，还会给每个BlockingQueueConsumer 起线程：
			Set<AsyncMessageProcessingConsumer> processors = new HashSet<AsyncMessageProcessingConsumer>();
			for (BlockingQueueConsumer consumer : this.consumers.keySet()) {
				AsyncMessageProcessingConsumer processor = new AsyncMessageProcessingConsumer(consumer);
				processors.add(processor);
				this.taskExecutor.execute(processor);  启动线程
			}
			
			
			
怎么收消息的？
在InternalConsumer里？
		public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body)
				if (BlockingQueueConsumer.this.abortStarted > 0) {
					if (!BlockingQueueConsumer.this.queue.offer(new Delivery(consumerTag, envelope, properties, body),
							BlockingQueueConsumer.this.shutdownTimeout, TimeUnit.MILLISECONDS)) { // NOSONAR
						// ignore - we're aborting anyway
					}
				}
				else {
					BlockingQueueConsumer.this.queue.put(new Delivery(consumerTag, envelope, properties, body));
				}		


为什么起transaction？？？在SimpleMessageListenerContainer里
	private boolean receiveAndExecute(final BlockingQueueConsumer consumer) throws Throwable {

		if (this.transactionManager != null) {
			try {
				return new TransactionTemplate(this.transactionManager, this.transactionAttribute)
						.execute(new TransactionCallback<Boolean>() {
							@Override
							public Boolean doInTransaction(TransactionStatus status) {			